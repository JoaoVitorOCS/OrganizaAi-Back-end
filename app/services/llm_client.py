import os

try:
        from google import genai  # type: ignore
        from google.genai.types import Content, Part  # type: ignore
except Exception:
        genai = None
        Content = None
        Part = None


class GeminiClient:
        """Cliente para integra√ß√£o com a API Gemini do Google.

        Observa√ß√µes:
        - Este cliente utiliza a biblioteca oficial `google-genai`.
        - √â necess√°rio configurar a API Key do Google na vari√°vel de ambiente `GOOGLE_API_KEY`.
        - A interface p√∫blica foi mantida para compatibilidade com o restante do projeto:
            `analyze_receipt_image(image_path)` e `classify_expense_category(items)`.
        """

        # Modelos padr√£o (podem ser sobrescritos via vari√°veis de ambiente)
        API_KEY = os.getenv("GOOGLE_API_KEY") or os.getenv("GEMINI_API_KEY")
        VISION_MODEL = os.getenv("GEMINI_VISION_MODEL", "gemini-1.5-pro-latest")
        TEXT_MODEL = os.getenv("GEMINI_TEXT_MODEL", "gemini-1.5-flash-latest")

        @classmethod
        def _ensure_library(cls) -> None:
            if not genai or Content is None or Part is None:
                raise ImportError(
                    "A biblioteca 'google-genai' n√£o est√° instalada. "
                    "Instale-a com: pip install google-genai"
                )

        @classmethod
        def _create_client(cls) -> "genai.Client":
            cls._ensure_library()

            if not cls.API_KEY:
                raise ValueError("Chave da API do Google n√£o configurada. Defina a vari√°vel de ambiente GOOGLE_API_KEY.")

            try:
                return genai.Client(api_key=cls.API_KEY)
            except Exception as exc:
                raise ValueError(
                    "N√£o foi poss√≠vel inicializar o cliente Gemini. Verifique a chave de API e a instala√ß√£o do pacote."
                ) from exc

        @staticmethod
        def analyze_receipt_image(image_path: str) -> dict:
            """
            Analisa a imagem de um cupom fiscal e extrai dados estruturados.

            Args:
                image_path: O caminho para o arquivo de imagem do cupom.

            Returns:
                Um dicion√°rio contendo os dados extra√≠dos no formato esperado pelo parser.

            Raises:
                ImportError: Se a biblioteca 'google-genai' n√£o estiver instalada.
                ValueError: Se a API key n√£o estiver configurada ou se ocorrer um erro na leitura
                            do arquivo ou na comunica√ß√£o com a API.
            """
            client = GeminiClient._create_client()

            print(f"üì∑ Analisando cupom: {os.path.basename(image_path)}")
            print(f"ü§ñ Modelo (vision): {GeminiClient.VISION_MODEL}")

            try:
                with open(image_path, "rb") as f:
                    image_bytes = f.read()
                print(f"üì¶ Tamanho da imagem: {len(image_bytes) / 1024:.2f} KB")
            except FileNotFoundError:
                raise ValueError(f"Arquivo n√£o encontrado: {image_path}")
            except Exception as e:
                raise ValueError(f"Erro ao ler o arquivo de imagem: {e}")

            # Detecta o tipo MIME com base na extens√£o do arquivo
            ext = image_path.lower().split('.')[-1]
            mime_types = {
                'jpg': 'image/jpeg', 'jpeg': 'image/jpeg', 'png': 'image/png',
                'webp': 'image/webp', 'gif': 'image/gif'
            }
            mime_type = mime_types.get(ext, 'image/jpeg')

            prompt = """
Analise cuidadosamente o cupom fiscal brasileiro na imagem e extraia as seguintes informa√ß√µes.

Retorne APENAS um objeto JSON v√°lido no formato abaixo (sem markdown, sem explica√ß√µes):

{
  "loja": "Nome completo do estabelecimento",
  "data_compra": "DD/MM/YYYY",
  "itens": [
    {
      "nome": "Nome do produto ou servi√ßo",
      "quantidade": 1,
      "valor_unitario": 0.00,
      "valor_total": 0.00
    }
  ],
  "valor_total": 0.00,
  "forma_pagamento": "D√©bito/Cr√©dito/Dinheiro/PIX/Outro",
  "categoria": null,
  "texto_bruto": "Todo o texto vis√≠vel no cupom"
}

INSTRU√á√ïES IMPORTANTES:
1. Extraia TODOS os itens/produtos listados no cupom.
2. Valores devem ser n√∫meros decimais com ponto (exemplo: 12.50).
3. Data no formato brasileiro DD/MM/YYYY.
4. Para quantidade, se n√£o especificado, use 1.
5. Para valor_unitario e valor_total, se forem iguais, repita o valor.
6. Se n√£o conseguir identificar algum campo, use null.
7. Em texto_bruto, transcreva todo o texto vis√≠vel do cupom.
8. Retorne APENAS o JSON, sem ```json, sem explica√ß√µes antes ou depois.
"""
            try:
                print("üì§ Enviando para a API Gemini...")
                contents = [
                    Content(
                        role="user",
                        parts=[
                            Part.from_text(prompt.strip()),
                            Part.from_bytes(data=image_bytes, mime_type=mime_type),
                        ],
                    )
                ]
                response = client.models.generate_content(
                    model=GeminiClient.VISION_MODEL,
                    contents=contents,
                )

                # A resposta da biblioteca √© encapsulada para manter a
                # compatibilidade com o resto do sistema que espera um formato espec√≠fico.
                result = {
                    "choices": [{"message": {"content": response.text or ""}}],
                    "raw": str(response)  # Armazena a representa√ß√£o da resposta para debug
                }

                print("‚úÖ An√°lise de imagem conclu√≠da.")
                return result

            except Exception as e:
                print(f"‚ùå Erro ao chamar a API Gemini: {type(e).__name__}: {e}")
                raise ValueError("Erro ao comunicar com a API Gemini. Verifique sua chave de API, o modelo configurado e a conex√£o.")

        @staticmethod
        def classify_expense_category(items: list[dict]) -> str:
            """
            Classifica a categoria de uma despesa com base em uma lista de itens.

            Args:
                items: Uma lista de dicion√°rios, onde cada um representa um item da compra.

            Returns:
                A categoria classificada como uma string ('Food', 'Transport', etc.).
                Retorna 'Utility' como padr√£o em caso de erro ou falta de dados.
            """
            if not genai or Content is None or Part is None:
                print("‚ö†Ô∏è Biblioteca 'google-genai' n√£o encontrada. A categoria n√£o ser√° classificada.")
                return "Utility"

            if not GeminiClient.API_KEY or not items:
                return "Utility"

            client = GeminiClient._create_client()

            # Concatena os nomes dos 10 primeiros itens para criar o prompt
            items_text = ", ".join([
                item.get('nome', '')
                for item in items[:10]
                if item.get('nome')
            ])

            if not items_text.strip():
                return "Utility"

            prompt = f"""
Classifique a seguinte lista de itens de compra em UMA das categorias abaixo:

Categorias dispon√≠veis:
- Food (alimentos, bebidas, restaurantes, supermercado)
- Transport (combust√≠vel, transporte p√∫blico, ped√°gio, estacionamento)
- Utility (contas, servi√ßos, utilidades dom√©sticas)
- Entertainment (lazer, divers√£o, streaming, jogos, cinema)

Itens comprados: {items_text}

Responda APENAS com o nome da categoria em ingl√™s (Food, Transport, Utility ou Entertainment).
N√£o adicione explica√ß√µes.
"""
            try:
                contents = [
                    Content(
                        role="user",
                        parts=[
                            Part.from_text(prompt.strip())
                        ],
                    )
                ]
                response = client.models.generate_content(
                    model=GeminiClient.TEXT_MODEL,
                    contents=contents,
                    generation_config={"temperature": 0.1, "max_output_tokens": 60}
                )
                category = (response.text or "").strip()

            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao classificar categoria com a API Gemini: {e}")
                return "Utility"

            # Valida√ß√£o e limpeza da categoria retornada pela API
            valid_categories = ["Food", "Transport", "Utility", "Entertainment"]
            category_clean = category.strip().strip('.').strip()

            if category_clean in valid_categories:
                return category_clean

            # Fallback para caso a API retorne texto extra
            for valid_cat in valid_categories:
                if valid_cat.lower() in category.lower():
                    return valid_cat

            print(f"‚ö†Ô∏è Categoria inv√°lida retornada pela API: '{category}'. Usando 'Utility' como padr√£o.")
            return "Utility"
